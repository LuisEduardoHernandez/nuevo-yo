{"ast":null,"code":"'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz',\n  // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ',\n  // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ',\n  // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_'\n};\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n  const readLength = buffer.length;\n  const Big = require('big.js');\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n  let output = '';\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n  Big.DP = 20;\n  Big.RM = 1;\n  return output;\n}\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md5';\n  maxLength = maxLength || 9999;\n  const hash = require('crypto').createHash(hashType);\n  hash.update(buffer);\n  if (digestType === 'base26' || digestType === 'base32' || digestType === 'base36' || digestType === 'base49' || digestType === 'base52' || digestType === 'base58' || digestType === 'base62' || digestType === 'base64') {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\nmodule.exports = getHashDigest;","map":{"version":3,"names":["baseEncodeTables","encodeBufferToBase","buffer","base","encodeTable","Error","readLength","length","Big","require","RM","DP","b","i","times","plus","output","gt","mod","div","getHashDigest","hashType","digestType","maxLength","hash","createHash","update","digest","substr","module","exports"],"sources":["/Users/luiseduardohernandezgranillo/Desktop/PROYECTOS/nuevoyo/nuevo-yo/node_modules/file-loader/node_modules/loader-utils/lib/getHashDigest.js"],"sourcesContent":["'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz', // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_',\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  const readLength = buffer.length;\n  const Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = '';\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n\n  return output;\n}\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md5';\n  maxLength = maxLength || 9999;\n\n  const hash = require('crypto').createHash(hashType);\n\n  hash.update(buffer);\n\n  if (\n    digestType === 'base26' ||\n    digestType === 'base32' ||\n    digestType === 'base36' ||\n    digestType === 'base49' ||\n    digestType === 'base52' ||\n    digestType === 'base58' ||\n    digestType === 'base62' ||\n    digestType === 'base64'\n  ) {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(\n      0,\n      maxLength\n    );\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAG;EACvB,EAAE,EAAE,4BAA4B;EAChC,EAAE,EAAE,kCAAkC;EAAE;EACxC,EAAE,EAAE,sCAAsC;EAC1C,EAAE,EAAE,mDAAmD;EAAE;EACzD,EAAE,EAAE,sDAAsD;EAC1D,EAAE,EAAE,4DAA4D;EAAE;EAClE,EAAE,EAAE,gEAAgE;EACpE,EAAE,EAAE;AACN,CAAC;AAED,SAASC,kBAAkB,CAACC,MAAM,EAAEC,IAAI,EAAE;EACxC,MAAMC,WAAW,GAAGJ,gBAAgB,CAACG,IAAI,CAAC;EAC1C,IAAI,CAACC,WAAW,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,GAAGF,IAAI,CAAC;EACjD;EAEA,MAAMG,UAAU,GAAGJ,MAAM,CAACK,MAAM;EAChC,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAE7BD,GAAG,CAACE,EAAE,GAAGF,GAAG,CAACG,EAAE,GAAG,CAAC;EACnB,IAAIC,CAAC,GAAG,IAAIJ,GAAG,CAAC,CAAC,CAAC;EAElB,KAAK,IAAIK,CAAC,GAAGP,UAAU,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxCD,CAAC,GAAGA,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAACb,MAAM,CAACW,CAAC,CAAC,CAAC;EAClC;EAEA,IAAIG,MAAM,GAAG,EAAE;EACf,OAAOJ,CAAC,CAACK,EAAE,CAAC,CAAC,CAAC,EAAE;IACdD,MAAM,GAAGZ,WAAW,CAACQ,CAAC,CAACM,GAAG,CAACf,IAAI,CAAC,CAAC,GAAGa,MAAM;IAC1CJ,CAAC,GAAGA,CAAC,CAACO,GAAG,CAAChB,IAAI,CAAC;EACjB;EAEAK,GAAG,CAACG,EAAE,GAAG,EAAE;EACXH,GAAG,CAACE,EAAE,GAAG,CAAC;EAEV,OAAOM,MAAM;AACf;AAEA,SAASI,aAAa,CAAClB,MAAM,EAAEmB,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAE;EAC9DF,QAAQ,GAAGA,QAAQ,IAAI,KAAK;EAC5BE,SAAS,GAAGA,SAAS,IAAI,IAAI;EAE7B,MAAMC,IAAI,GAAGf,OAAO,CAAC,QAAQ,CAAC,CAACgB,UAAU,CAACJ,QAAQ,CAAC;EAEnDG,IAAI,CAACE,MAAM,CAACxB,MAAM,CAAC;EAEnB,IACEoB,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,EACvB;IACA,OAAOrB,kBAAkB,CAACuB,IAAI,CAACG,MAAM,EAAE,EAAEL,UAAU,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CACnE,CAAC,EACDL,SAAS,CACV;EACH,CAAC,MAAM;IACL,OAAOC,IAAI,CAACG,MAAM,CAACL,UAAU,IAAI,KAAK,CAAC,CAACM,MAAM,CAAC,CAAC,EAAEL,SAAS,CAAC;EAC9D;AACF;AAEAM,MAAM,CAACC,OAAO,GAAGV,aAAa"},"metadata":{},"sourceType":"script"}